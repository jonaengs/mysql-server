--echo #########################################################################
--echo # START SET MANUAL HISTOGRAM
--echo #########################################################################

--echo # CREATE TABLE
CREATE TABLE t(j json);
--echo # INSERT DATA
INSERT INTO t VALUES("{}");
INSERT INTO t VALUES("[1]");
INSERT INTO t VALUES("[1]");
INSERT INTO t VALUES("[2]");

--echo  
--echo ATTEMPT SET JSON_FLEX ON STRING COLUMN
ANALYZE TABLE t UPDATE HISTOGRAM ON j USING DATA 
    -- Note: data-type must match data type of the column
    '{"buckets": [["base64:type254:YWE=", 0.13, 0.2], ["base64:type254:YmI=", 0.13, 0.0]],
    "histogram-type": "json-flex",
    "data-type": "json",
    "null-values": 0.0,
    "last-updated": "2023-02-27 16:13:14.0",
    "number-of-buckets-specified": 100,
    "collation-id": 255,
    "sampling-rate": 1.0}';

--echo # SHOW HISTOGRAM
# SELECT * FROM information_schema.column_statistics WHERE TABLE_NAME = 't' AND COLUMN_NAME = 'j';
--echo # QUERY t
# SELECT * FROM t;
SET OPTIMIZER_TRACE = "enabled=on";
# SELECT FROM t AS t1 JOIN t AS t2 ON t1.j = t2.j WHERE t1.j->>"$[0]" = 1;


--echo # Query that enables us break after all the setup has been taken care of,
--echo # at which point we can set the breakpoints we actually care about
--echo # With this one, try breaking on Item_func_st_within::eval
SELECT ST_WITHIN(ST_PointFromText('POINT(10 10)'), ST_LineFromText('LINESTRING(0 0,0 10,10 0)'));

--echo #
EXPLAIN SELECT * FROM t WHERE t.j = "[1]";
SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
EXPLAIN SELECT * FROM t WHERE t.j->"$[0]" = "1";
SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
EXPLAIN SELECT * FROM t WHERE t.j->>"$[0]" = 1;
SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;

--echo #
EXPLAIN SELECT * FROM t WHERE t.j->>"$[0]" BETWEEN 0 AND 5;
SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;

--echo #
EXPLAIN SELECT * FROM t WHERE t.j->>"$[0]" >= 1;
SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;


# EXPLAIN ANALYZE SELECT count(*) FROM t AS t1 JOIN t AS t2 ON t1.j->>"$[0]" = t2.j->>"$[0]" WHERE t1.j->>"$[0]" = 2;
# EXPLAIN ANALYZE SELECT count(*) FROM t WHERE t.j = "[1]" OR t.j = "[2]" GROUP BY t.j;
# SELECT JSON_EXTRACT(TRACE, "$**.filtering_effect") FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
